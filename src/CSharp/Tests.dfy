/// Literals
/// ========

method Literals_Boolean() {
  print true;
  print false;
}

method Literals_Int() {
  print 1;
  print -1;
  print 0123456789;
  print -0123456789;
  print 2147483648; // 2**31
  print -2147483648;
  print 4294967295; // 2**32 - 1
  print -4294967295;
  print 9223372036854775808; // 2**63
  print -9223372036854775808;
  print 18446744073709551615; // 2**64 - 1
  print -18446744073709551615;
  print 340282366920938463463374607431768211455; // 2**128 - 1
  print -340282366920938463463374607431768211455;
  print 100000000000000000000000000000000000000000000000000000000000000000;
  print -100000000000000000000000000000000000000000000000000000000000000000;

  print 0x0_1_2_3_4_5_6_7_8_9_A_B_C_D_E_F;
  print -0x0_1_2_3_4_5_6_7_8_9_A_B_C_D_E_F;
}

method Literals_Real() {
  print 0.1;
  print -0.1;
  print 9007199254740993.0; // 2**53 + 1
  print -9007199254740993.0;
  print 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000; //  DBL_MAX
  print -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  print 340282346638528860000000000000000000000; //  FLT_MAX
  print -340282346638528860000000000000000000000;
  print 1.57079632679489661923; //  M_PI_2
  print -1.57079632679489661923;
  print 1.4426950408889634074; //  M_LOG2E
  print -1.4426950408889634074;
  print 0.43429448190325182765; //  M_LOG10E
  print -0.43429448190325182765;
  print 0.69314718055994530942; //  M_LN2
  print -0.69314718055994530942;
  print 2.30258509299404568402; //  M_LN10
  print -2.30258509299404568402;
}

method Literals_Char() {
  print 'A';
  print '\u0041';
  print 'a';
  print '\u0061';
  print '\'';
  print '\"';
  print '\\';
  print '\n';
  print '\r';
  print '\t';
  print '\0';
}

method Literals_String() {
  print "A\u0041a\u0061\'\"\\\n\r\t\0";
  print @"Aa\'";
}

/// Display expressions
/// ===================

method Display_Set() {
  print {1, 2, 3};
}

method Display_Multiset() {
  print multiset{1, 2, 3};
}

method Display_Seq() {
  print [1, 2, 3];
}

method Display_Map() {
  print map[1 := 2, 3 := 4];
}

method Display_Tuples() {
  print ();
  print (1, 2);
  print ("A", 'B', 0x43);
}

// Printing multiple values
method Print() {
  print 1, 2, 3;
}

method Main() {
  // Literals_Boolean();
  // print '\n';
  // Literals_Int();
  // print '\n';
  // Literals_Real();
  // print '\n';
  // Literals_Char();
  // print '\n';
  // Literals_String();
  // print '\n';
  // Literals_Tuples();
}
